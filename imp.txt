 gsap.registerPlugin(ScrollTrigger);

  const imgDivRef = useRef(null);
  const imgRef = useRef(null);
  useGSAP(function () {
    gsap.to(imgDivRef.current, {
      scrollTrigger: {
        trigger: imgDivRef.current,
        markers: true,
        start: 'top 25%',
        end: 'top -100%',
        pin: true,
        scrub: true,
        onUpdate: (elem) => {
          console.log(elem.progress);
        },
      },
    });
  });

this elem contains scrollTrigger Object and this progress tends from 0 to 1 that denotes scroll progress

in gsap.from. (from final to initial)
in gsap.to (from initial to final)


 const pageRef = useRef(null);
  useGSAP(() => {
    const tl = gsap.timeline();
    tl.to(stairRef.current, {
      display: 'block',
    });
    tl.from('.stair', {
      height: 0,
      stagger: {
        amount: -0.25,
      },
    });
    tl.to('.stair', {
      y: '100%',
      stagger: {
        amount: -0.25,
      },
    });
    tl.to(stairRef.current, {
      display: 'none',
    });
    tl.to('.stair', {
      y: '0%',
    });
    gsap.from(pageRef.current, {
      opacity: 0,
      delay: 1.3,
      scale: 1.2,
    });
  }, [currentPath]);

Visual Flow:
Step	Property Changed	Visual Effect
from({ height: 0 })	height grows from 0 → 100%	Panels grow upward like opening blinds
to({ y: '100%' })	y moves 0% → 100%	Panels slide down off the screen
to({ y: '0%' })	y jumps back 100% → 0%	Panels reset to the top position, hidden


inDetail 
Initial .from() Animation
tl.from('.stair', {
  height: 0,
  stagger: {
    amount: -0.25,
  },
});


What it does:

tl.from starts as if the element's height was 0 initially, and animates to its actual final height (100%).
So, visually, the black .stair panels grow from 0 → 100% height, creating a reveal effect.
The negative stagger.amount means the last element starts first and moves backward in sequence.
///////////////////////////////////
Slide Down Using y: '100%'
tl.to('.stair', {
  y: '100%',
  stagger: {
    amount: -0.25,
  },
});


What it does:
Now that .stair elements are fully visible, this step moves them down vertically by 100% of their own height.
It does NOT change the height, only the vertical position.
Think of it like sliding a curtain down.
After this step, the .stair elements are moved completely off-screen.

////////////////////////////////////
Reset Position Back to 0%
tl.to('.stair', {
  y: '0%',
});


What it does:

This instantly resets the .stair position back to the top (y: 0%).

It's usually done so that when you revisit or reload the animation, the .stair elements are ready to animate again without being stuck off-screen.